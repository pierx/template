import groovy.io.FileType

import javax.crypto.Cipher
import javax.crypto.SecretKey
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

ext {
    packageName = project.packageName
    minSdk = project.minSdkVersion.toInteger()
    targetSdk = project.targetSdkVersion.toInteger()
    vCode = project.versionCode.toInteger()
    vName = project.versionName

    ThemeName = project.ThemeName
    ThemeAuthor = project.ThemeAuthor
    ThemeAuthorEmail = project.ThemeAuthorEmail
    ThemeWallpaperSource = project.ThemeWallpaperSource
    ThemeSupportLegacy = project.ThemeSupportLegacy
    ThemeSupportSamsung = project.ThemeSupportSamsung.toBoolean()
    ThemeHeroOverride = project.ThemeHeroOverride.toBoolean()

    // Whether the theme assets should be encrypted or not,
    // this makes it harder for pirates and kangers! (DEFAULT: true)
    SHOULD_ENCRYPT_ASSETS = project.SHOULD_ENCRYPT_ASSETS.toBoolean()

    // Whether this theme supports third party theme systems, we will not be able to help you debug
    // your themes on external theming systems, so the team will NOT respond to external systems if
    // there are issues with your theme (DEFAULT: false)
    SUPPORTS_THIRD_PARTY_SYSTEMS = project.SUPPORTS_THIRD_PARTY_SYSTEMS.toBoolean()

    // Play Store AntiPiracy LVL configurations
    BASE_64_LICENSE_KEY = project.BASE_64_LICENSE_KEY
    APK_SIGNATURE_PRODUCTION = project.APK_SIGNATURE_PRODUCTION

    // Piracy library configurations
    ENABLE_APP_BLACKLIST_CHECK = project.ENABLE_APP_BLACKLIST_CHECK.toBoolean()
    ENFORCE_INTERNET_CHECK = project.ENFORCE_INTERNET_CHECK.toBoolean()
    ENFORCE_GOOGLE_PLAY_INSTALL = project.ENFORCE_GOOGLE_PLAY_INSTALL.toBoolean()
    ENFORCE_AMAZON_APP_STORE_INSTALL = project.ENFORCE_AMAZON_APP_STORE_INSTALL.toBoolean()

    // Allow third party substratum builds
    ALLOW_THIRD_PARTY_SUBSTRATUM_BUILDS = project.ALLOW_THIRD_PARTY_SUBSTRATUM_BUILDS.toBoolean()

    /*MODs*/
    SUBSTRATUM_FILTER_CHECK = project.SUBSTRATUM_FILTER_CHECK.toBoolean()
    ENFORCE_MINIMUM_SUBSTRATUM_VERSION = project.ENFORCE_MINIMUM_SUBSTRATUM_VERSION.toBoolean()
    MINIMUM_SUBSTRATUM_VERSION = project.MINIMUM_SUBSTRATUM_VERSION.toInteger()
    SHOW_LAUNCH_DIALOG = project.SHOW_LAUNCH_DIALOG.toBoolean()
    SHOW_DIALOG_REPEATEDLY = project.SHOW_DIALOG_REPEATEDLY.toBoolean()

    /*DO NOT MODIFY*/
    byte[] key = new byte[16]
    new Random().nextBytes(key)
    KEY = key
    byte[] iv = new byte[16]
    new Random().nextBytes(iv)
    IV_KEY = iv
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId packageName
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        versionCode vCode
        versionName vName

        // Themers: Do not touch this, they will only formulate integrity structure of the core
        //          template
        buildConfigField "boolean", "SUPPORTS_THIRD_PARTY_SYSTEMS", "" + SUPPORTS_THIRD_PARTY_SYSTEMS
        buildConfigField "String", "BASE_64_LICENSE_KEY", "\"" + BASE_64_LICENSE_KEY + "\""
        buildConfigField "String", "APK_SIGNATURE_PRODUCTION", "\"" + APK_SIGNATURE_PRODUCTION + "\""
        buildConfigField "boolean", "ENABLE_APP_BLACKLIST_CHECK", "" + ENABLE_APP_BLACKLIST_CHECK
        buildConfigField "boolean", "ENFORCE_INTERNET_CHECK", "" + ENFORCE_INTERNET_CHECK
        buildConfigField "boolean", "ENFORCE_GOOGLE_PLAY_INSTALL", "" + ENFORCE_GOOGLE_PLAY_INSTALL
        buildConfigField "boolean", "ENFORCE_AMAZON_APP_STORE_INSTALL", "" + ENFORCE_AMAZON_APP_STORE_INSTALL
        buildConfigField "boolean", "ALLOW_THIRD_PARTY_SUBSTRATUM_BUILDS", "" + ALLOW_THIRD_PARTY_SUBSTRATUM_BUILDS

        // Constant
        buildConfigField "boolean", "VAL_SUBSTRATUM_FILTER_CHECK", "" + SUBSTRATUM_FILTER_CHECK
        buildConfigField "boolean", "VAL_ENFORCE_MINIMUM_SUBSTRATUM_VERSION", "" + ENFORCE_MINIMUM_SUBSTRATUM_VERSION
        buildConfigField "boolean", "VAL_SHOW_LAUNCH_DIALOG", "" + SHOW_LAUNCH_DIALOG
        buildConfigField "boolean", "VAL_SHOW_DIALOG_REPEATEDLY", "" + SHOW_DIALOG_REPEATEDLY
        buildConfigField "int", "VAL_MINIMUM_SUBSTRATUM_VERSION", "" + MINIMUM_SUBSTRATUM_VERSION

        //Theme Configuration
        resValue "string", "VAL_THEMENAME", "" + ThemeName
        resValue "string", "VAL_THEMEAUTHOR", "" + ThemeAuthor
        resValue "string", "VAL_ThemeAuthorEmail", "" + ThemeAuthorEmail
        resValue "string", "VAL_ThemeWallpaperSource", "" + ThemeWallpaperSource
        resValue "string", "VAL_ThemeHeroOverride", "" + ThemeHeroOverride
        resValue "bool", "VAL_ThemeSupportLegacy", "" + ThemeSupportLegacy
        resValue "bool", "VAL_ThemeSupportSamsung", "" + ThemeSupportSamsung

        //DO NOT MODIFY
        resValue "string", "encryption_status", (shouldEncrypt() ? "onCompileVerify" : "false")
        buildConfigField "String", "IV_KEY", "\"" + IV_KEY + "\""
        buildConfigField "byte[]", "DECRYPTION_KEY", String.valueOf("\"" + KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")
        buildConfigField "byte[]", "IV_KEY", String.valueOf("\"" + IV_KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            // When you compile an APK as release, your resources and IV keys will be safeguarded
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.github.javiersantos:PiracyChecker:1.2.2'
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version") {
        transitive = true
    }
}

// Themers, do not touch this! This is our function to help us encrypt your assets!
task encryptAssets {
    if (!shouldEncrypt()) {
        println("Skipping assets encryption...")
        return
    }

    def tempAssets = new File(getProjectDir(), "/src/main/assets-temp")
    if (!tempAssets.exists()) {
        println("Encrypting duplicated assets, don't worry, your original assets are safe...")
        def list = []
        def dir = new File(getProjectDir(), "src/main/assets")
        dir.eachFileRecurse(FileType.FILES) { file ->
            list << file

            FileInputStream fis = new FileInputStream(file)
            File fo = new File(file.getAbsolutePath().replace("assets", "assets-temp"))
            fo.getParentFile().mkdirs()
            FileOutputStream fos = new FileOutputStream(fo)
            byte[] buffer = new byte[4096]
            int n
            while ((n = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, n)
            }
            fis.close()
            fos.close()
        }

        list.each {
            if (it.getAbsolutePath().contains("overlays")) {
                Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
                SecretKey secret = new SecretKeySpec(KEY, "AES")
                IvParameterSpec iv = new IvParameterSpec(IV_KEY)

                cipher.init(Cipher.ENCRYPT_MODE, secret, iv)
                FileInputStream fis = new FileInputStream(it)
                FileOutputStream fos = new FileOutputStream(it.getAbsolutePath() + ".enc")

                byte[] input = new byte[64]
                int bytesRead
                while ((bytesRead = fis.read(input)) != -1) {
                    byte[] output = cipher.update(input, 0, bytesRead)
                    if (output != null) {
                        fos.write(output)
                    }
                }
                byte[] output = cipher.doFinal()
                if (output != null) {
                    fos.write(output)
                }
                fis.close()
                fos.flush()
                fos.close()

                it.delete()
            }
        }
    } else {
        throw new RuntimeException("Old temporary assets found! Try and do a clean project.")
    }
}

project.afterEvaluate {
    preBuild.dependsOn encryptAssets
}

gradle.buildFinished {
    def tempAssets = new File(getProjectDir(), "/src/main/assets-temp")
    if (tempAssets.exists()) {
        println("Cleaning duplicated encrypted assets, not your decrypted assets...")
        def encryptedAssets = new File(getProjectDir(), "src/main/assets")
        encryptedAssets.deleteDir()

        tempAssets.eachFileRecurse(FileType.FILES) { file ->
            FileInputStream fis = new FileInputStream(file)
            File fo = new File(file.getAbsolutePath().replace("assets-temp", "assets"))
            fo.getParentFile().mkdirs()
            FileOutputStream fos = new FileOutputStream(fo)
            byte[] buffer = new byte[4096]
            int n
            while ((n = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, n)
            }
            fis.close()
            fos.close()
        }
        tempAssets.deleteDir()
    }
}

boolean shouldEncrypt() {
    ArrayList<String> tasks = project.gradle.startParameter.taskNames
    return SHOULD_ENCRYPT_ASSETS && Arrays.toString(tasks).toLowerCase().contains("release")
}

repositories {
    mavenCentral()
}
